{"version":3,"sources":["components/ucu/Ucu.js","index.js","App.js"],"names":["sliderIntValues","value","label","sliderFloatValues","Ucu","useState","inputFieldInteger","setInputFieldInteger","sliderValue","setSliderValue","switchButton","setSwitchButton","someFloatValue","setSomeFloatValue","xmlUpload","setXmlUpload","showElement","setShowElement","useEffect","fileReader","FileReader","onload","result","includes","readAsText","console","log","a","async","fetch","then","res","text","method","body","loopbackValue","toString","fetchSliderValuePutData","className","accept","style","display","id","multiple","type","onChange","e","target","files","htmlFor","Button","background","borderRadius","border","color","height","padding","boxShadow","variant","component","onSubmit","xml","require","create","encoding","ele","up","end","pretty","FileSaver","blob","Blob","saveAs","checked","onstyle","size","offstyle","TextField","InputLabelProps","event","Slider","defaultValue","aria-labelledby","valueLabelDisplay","step","track","marks","min","max","href","ReactDOM","render","document","getElementById"],"mappings":"kSAKMA,G,MAAkB,CACpB,CACIC,MAAO,EACPC,MAAO,KAEX,CACID,MAAO,GACPC,MAAO,MAEX,CACID,MAAO,IACPC,MAAO,SAITC,EAAoB,CACtB,CACIF,MAAO,EACPC,MAAO,OAEX,CACID,MAAO,EACPC,MAAO,OAEX,CACID,MAAO,GACPC,MAAO,SAOA,SAASE,IAAO,IAAD,EAEwBC,mBAAS,IAFjC,mBAEnBC,EAFmB,KAEAC,EAFA,OAGYF,mBAAS,IAHrB,mBAGnBG,EAHmB,KAGNC,EAHM,OAIcJ,oBAAS,GAJvB,mBAInBK,EAJmB,KAILC,EAJK,OAKkBN,mBAAS,KAL3B,mBAKnBO,EALmB,KAKHC,EALG,OAMQR,mBAAS,MANjB,mBAMnBS,EANmB,KAMRC,EANQ,OAOYV,oBAAS,GAPrB,mBAOnBW,EAPmB,KAONC,EAPM,KAqO1B,OAtNAC,qBAAU,WACN,GAAiB,MAAbJ,EAAmB,CACnB,IAAIK,EAAa,IAAIC,WACrBD,EAAWE,OAAS,WACZF,EAAWG,OAAOC,SAAS,UAC3BN,GAAe,GAEfA,GAAe,IAGvBE,EAAWK,WAAWV,OA8C9BI,qBAAU,WACNO,QAAQC,IAAI,4BAA8BhB,EAAe,KAAO,QAChEe,QAAQC,IAAI,gBAAkBlB,GAvClC,EAAAmB,EAAAC,OAAA,gDACIC,MAAM,OACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAFzB,qCAKA,EAAAL,EAAAC,OAAA,gDACIC,MAAM,MAAO,CACTI,OAAQ,MAAOC,KAAMxB,EAAe,IAAM,MAEzCoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAJzB,qCAUA,EAAAL,EAAAC,OAAA,gDACIC,MAAM,OACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAFzB,qCAKA,mBAAAL,EAAAC,OAAA,gDACQO,EAAgB3B,EAAY4B,WAChCP,MAAM,MAAO,CACTI,OAAQ,MAAOC,KAAMC,IAEpBL,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UALzB,qCAuBIK,MAyJA,yBAAKC,UAAU,OACX,wBAAIA,UAAU,iBAAd,2DAAsF,8BACtF,yBAAKA,UAAU,aACX,2BACIC,OAAO,UACPC,MAAO,CAAEC,QAAS,QAClBC,GAAG,qBACHC,UAAQ,EACRC,KAAK,OACLC,SAtOhB,SAA0BC,GACtB/B,EAAa+B,EAAEC,OAAOC,MAAM,OAuOpB,2BAAOC,QAAQ,sBACX,kBAACC,EAAA,EAAD,CACAV,MAAS,CACLW,WAAY,qDACZC,aAAc,EACdC,OAAQ,EACRC,MAAO,QACPC,OAAQ,GACRC,QAAS,SACTC,UAAW,yCAEdC,QAAQ,YAAYC,UAAU,OAAOrB,UAAU,gBAVhD,YAeR,0BAAMsB,SAzKd,WACInC,QAAQC,IAAIhB,GACZe,QAAQC,IAAIlB,GACZiB,QAAQC,IAAId,GAEZ,IACIiD,EADUC,EAAQ,IACJC,OAAO,SAAU,CAAEC,SAAU,UAC1CC,IAAI,SAASC,KACbD,IAAI,gBACJA,IAAI,YAAa,CAAE,KAAQ,iBAC3BA,IAAI,SACJA,IAAI,WAAY,CAAE,KAAQ,UAC1BA,IAAI,UAAW,CACZ,KAAQ,UACR,KAAQ,IACR,IAAO,IACP,IAAO,IACP,KAAQ,SACTzD,GAAa0D,KACfD,IAAI,UAAW,CACZ,KAAQ,UACR,KAAQ,IACR,IAAO,IACP,IAAO,IACP,KAAQ,SACTzD,GAAa0D,KACfD,IAAI,UAAW,CACZ,KAAQ,WACR,KAAQ,IACR,IAAO,IACP,IAAO,IACP,KAAQ,UACTzD,GAAa0D,KACfD,IAAI,UAAW,CACZ,KAAQ,WACR,KAAQ,IACR,IAAO,IACP,IAAO,IACP,KAAQ,UACTzD,GAAa0D,KACfD,IAAI,UAAW,CACZ,KAAQ,WACR,KAAQ,IACR,IAAO,IACP,IAAO,IACP,KAAQ,UACT3D,GAAmB4D,KACrBD,IAAI,UAAW,CACZ,KAAQ,WACR,KAAQ,IACR,IAAO,IACP,IAAO,IACP,KAAQ,UACT3D,GAAmB4D,KACrBD,IAAI,UAAW,CACZ,KAAQ,WACR,KAAQ,IACR,IAAO,IACP,IAAO,IACP,KAAQ,WACTrD,GAAgBsD,KAClBD,IAAI,UAAW,CACZ,KAAQ,SACR,KAAQ,IACR,IAAO,IACP,IAAO,IACP,KAAQ,WACTvD,GAAcwD,KAAKA,KACrBD,IAAI,SAAU,CAAE,KAAQ,YACxBA,IAAI,UAAW,CACZ,KAAQ,UACR,KAAQ,IACR,IAAO,IACP,IAAO,IACP,KAAQ,SACTzD,GAAa0D,KACfD,IAAI,UAAW,CACZ,KAAQ,UACR,KAAQ,IACR,IAAO,IACP,IAAO,IACP,KAAQ,SACTzD,GAAa0D,KACfD,IAAI,UAAW,CACZ,KAAQ,WACR,KAAQ,IACR,IAAO,IACP,IAAO,IACP,KAAQ,UACTzD,GAAa0D,KACfD,IAAI,UAAW,CACZ,KAAQ,WACR,KAAQ,IACR,IAAO,IACP,IAAO,IACP,KAAQ,UACTzD,GAAa0D,KACfD,IAAI,UAAW,CACZ,KAAQ,WACR,KAAQ,IACR,IAAO,IACP,IAAO,IACP,KAAQ,UACT3D,GAAmB4D,KACrBD,IAAI,UAAW,CACZ,KAAQ,WACR,KAAQ,IACR,IAAO,IACP,IAAO,IACP,KAAQ,UACT3D,GAAmB4D,KACrBD,IAAI,UAAW,CACZ,KAAQ,WACR,KAAQ,IACR,IAAO,IACP,IAAO,IACP,KAAQ,WACTrD,GAAgBsD,KAClBD,IAAI,UAAW,CACZ,KAAQ,SACR,KAAQ,IACR,IAAO,IACP,IAAO,IACP,KAAQ,WACTvD,GAAcwD,KAChBC,IAAI,CAAEC,QAAQ,IACnB3C,QAAQC,IAAImC,GAGZ,IAAIQ,EAAYP,EAAQ,IACpBQ,EAAO,IAAIC,KAAK,CAACV,GAAM,CAAEjB,KAAM,kCACnCyB,EAAUG,OAAOF,EAAM,sBAuCdtD,EACG,yBAAKsB,UAAU,mBACX,8CACmB,kBAAC,IAAD,CACXmC,QAAS/D,EACTgE,QAAQ,UACRC,KAAK,KACLC,SAAS,SACT/B,SA1L5B,WACIlC,GAAiBD,QA8LH,KAGN,4BACI,yBAAK4B,UAAU,eACX,4BACI,kBAACuC,EAAA,EAAD,CAAWnC,GAAG,cAAcxC,MAAM,2BAA2BwD,QAAQ,WACjEoB,gBAAiB,CAAEtC,MAAO,CAAEc,MAAO,YAAgBT,SAvN/E,SAAkCkC,EAAO9E,GACrCM,EAAqBwE,EAAMhC,OAAO9C,YA0NtB,yBAAKqC,UAAU,gBAAf,+CACI,kBAAC0C,EAAA,EAAD,CACIC,aAAc,GACdC,kBAAgB,kBAChBC,kBAAkB,OAClBC,KAAM,EACN9B,MAAM,UACN+B,MAAM,WACNxC,SA/NxB,SAAsBkC,EAAO9E,GACzBQ,EAAeR,IA+NKqF,MAAOtF,EACPuF,IAAK,EACLC,IAAK,QAIjB,6BACI,0BAAMlD,UAAU,eAAhB,wBAAoD9B,EAApD,MAGJ,yBAAK8B,UAAU,iBACX,kBAAC0C,EAAA,EAAD,CACIC,aAAc,IACdC,kBAAgB,kBAChBC,kBAAkB,OAClBC,KAAM,GACN9B,MAAM,UACN+B,MAAM,WACNxC,SAjOpB,SAA0BkC,EAAO9E,GAC7BY,EAAkBZ,IAiOFqF,MAAOnF,EACPoF,IAAK,EACLC,IAAK,MAGb,6BACI,0BAAMlD,UAAU,oBAAhB,sBAAuD1B,IAG3D,yBAAK0B,UAAU,eACX,kBAACY,EAAA,EAAD,CACEV,MAAS,CACPW,WAAY,qDACZC,aAAc,EACdC,OAAQ,EACRC,MAAO,QACPC,OAAQ,GACRC,QAAS,SACTC,UAAW,yCAEfC,QAAQ,YAAad,KAAM,SAAUU,MAAM,aAV3C,iBAcJ,6BACC,uBAAGmC,KAAK,2BAAR,e,MCjXjBC,IAASC,OAAO,mBCAD,WAEb,OACE,yBAAKrD,UAAU,OACb,kBAAC,EAAD,SDJU,MAASsD,SAASC,eAAe,W","file":"static/js/main.d64ee6fc.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Slider, TextField } from '@material-ui/core';\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react'\nimport './Ucu.css';\n\nconst sliderIntValues = [\n    {\n        value: 0,\n        label: '0',\n    },\n    {\n        value: 50,\n        label: '50',\n    },\n    {\n        value: 100,\n        label: '100',\n    },\n];\n\nconst sliderFloatValues = [\n    {\n        value: 0.0,\n        label: '0.0',\n    },\n    {\n        value: 5.0,\n        label: '5.0',\n    },\n    {\n        value: 10.0,\n        label: '10.0',\n    },\n];\n\n\n\n\nexport default function Ucu() {\n\n    const [inputFieldInteger, setInputFieldInteger] = useState(44);\n    const [sliderValue, setSliderValue] = useState(30);\n    const [switchButton, setSwitchButton] = useState(true);\n    const [someFloatValue, setSomeFloatValue] = useState(1.5);\n    const [xmlUpload, setXmlUpload] = useState(null);\n    const [showElement, setShowElement] = useState(false);\n\n    function uploadXMLHandler(e) {\n        setXmlUpload(e.target.files[0]);\n    }\n\n\n\n    useEffect(() => {\n        if (xmlUpload != null) {\n            var fileReader = new FileReader();\n            fileReader.onload = () => {\n                if (fileReader.result.includes(\"test_b\")) {\n                    setShowElement(true);\n                } else {\n                    setShowElement(false);\n                }\n            };\n            fileReader.readAsText(xmlUpload);\n\n        }\n    });\n\n\n\n\n\n    async function fetchSwitchButtonData() {\n        fetch('/sb')\n            .then(res => res.text())\n    }\n\n    async function fetchSwitchButtonPutData() {\n        fetch('/sb', {\n            method: 'PUT', body: switchButton ? '1' : '0'\n        })\n            .then(res => res.text())\n    }\n\n\n\n\n    async function fetchSliderValueData() {\n        fetch('/sv')\n            .then(res => res.text())\n    }\n\n    async function fetchSliderValuePutData() {\n        let loopbackValue = sliderValue.toString();\n        fetch('/sv', {\n            method: 'PUT', body: loopbackValue\n        })\n            .then(res => res.text())\n    }\n\n\n    function handleNormalFieldInteger(event, value) {\n        setInputFieldInteger(event.target.value);\n    }\n\n    function handleChange(event, value) {\n        setSliderValue(value);\n    }\n\n    useEffect(() => {\n        console.log(\"Switch button is turned \" + (switchButton ? 'on' : 'off'));\n        console.log('Slider value ' + sliderValue);\n        fetchSwitchButtonData();\n        fetchSwitchButtonPutData();\n        fetchSliderValueData();\n        fetchSliderValuePutData();\n    });\n\n    function handleSwitchButton() {\n        setSwitchButton(!switchButton);\n    }\n\n    function handleFloatValue(event, value) {\n        setSomeFloatValue(value);\n    }\n\n    function handleSubmit() {\n        console.log(switchButton);\n        console.log(sliderValue);\n        console.log(someFloatValue);\n\n        var builder = require('xmlbuilder');\n        var xml = builder.create('config', { encoding: 'utf-8' })\n            .ele('types').up()\n            .ele('componenents')\n            .ele('component', { 'name': 'AMOS_APP4UCU' })\n            .ele('ports')\n            .ele('receiver', { 'name': 'toApp' })\n            .ele('element', {\n                'name': 'test_u8',\n                'init': '0',\n                'min': '0',\n                'max': '0',\n                'type': 'uint8'\n            }, sliderValue).up()\n            .ele('element', {\n                'name': 'test_i8',\n                'init': '0',\n                'min': '0',\n                'max': '0',\n                'type': 'sint8'\n            }, sliderValue).up()\n            .ele('element', {\n                'name': 'test_u16',\n                'init': '0',\n                'min': '0',\n                'max': '0',\n                'type': 'uint16'\n            }, sliderValue).up()\n            .ele('element', {\n                'name': 'test_i16',\n                'init': '0',\n                'min': '0',\n                'max': '0',\n                'type': 'sint16'\n            }, sliderValue).up()\n            .ele('element', {\n                'name': 'test_u32',\n                'init': '0',\n                'min': '0',\n                'max': '0',\n                'type': 'uint32'\n            }, inputFieldInteger).up()\n            .ele('element', {\n                'name': 'test_i32',\n                'init': '0',\n                'min': '0',\n                'max': '0',\n                'type': 'sint32'\n            }, inputFieldInteger).up()\n            .ele('element', {\n                'name': 'test_r32',\n                'init': '0',\n                'min': '0',\n                'max': '0',\n                'type': 'float32'\n            }, someFloatValue).up()\n            .ele('element', {\n                'name': 'test_b',\n                'init': '0',\n                'min': '0',\n                'max': '0',\n                'type': 'boolean',\n            }, switchButton).up().up()\n            .ele('sender', { 'name': 'fromApp' })\n            .ele('element', {\n                'name': 'test_u8',\n                'init': '0',\n                'min': '0',\n                'max': '0',\n                'type': 'uint8'\n            }, sliderValue).up()\n            .ele('element', {\n                'name': 'test_i8',\n                'init': '0',\n                'min': '0',\n                'max': '0',\n                'type': 'sint8'\n            }, sliderValue).up()\n            .ele('element', {\n                'name': 'test_u16',\n                'init': '0',\n                'min': '0',\n                'max': '0',\n                'type': 'uint16'\n            }, sliderValue).up()\n            .ele('element', {\n                'name': 'test_i16',\n                'init': '0',\n                'min': '0',\n                'max': '0',\n                'type': 'sint16'\n            }, sliderValue).up()\n            .ele('element', {\n                'name': 'test_u32',\n                'init': '0',\n                'min': '0',\n                'max': '0',\n                'type': 'uint32'\n            }, inputFieldInteger).up()\n            .ele('element', {\n                'name': 'test_i32',\n                'init': '0',\n                'min': '0',\n                'max': '0',\n                'type': 'sint32'\n            }, inputFieldInteger).up()\n            .ele('element', {\n                'name': 'test_r32',\n                'init': '0',\n                'min': '0',\n                'max': '0',\n                'type': 'float32'\n            }, someFloatValue).up()\n            .ele('element', {\n                'name': 'test_b',\n                'init': '0',\n                'min': '0',\n                'max': '0',\n                'type': 'boolean',\n            }, switchButton).up()\n            .end({ pretty: true });\n        console.log(xml)\n\n        //we can use File as well but IE and Edge do not support that so it is better to use Blob because it is supported\n        var FileSaver = require('file-saver');\n        var blob = new Blob([xml], { type: \"application/xml;charset=utf-8\" });\n        FileSaver.saveAs(blob, \"AMOS_APP4UCU.xml\");\n    }\n\n    const style = {\n  \n};\n\n\n\n\n    return (\n        <div className=\"Ucu\">\n            <h1 className=\"welcomeHeader\">This is the webserver page for the UCU microcontroller. <br /></h1>\n            <div className=\"uploadXML\">\n                <input\n                    accept=\"image/*\"\n                    style={{ display: 'none' }}\n                    id=\"raised-button-file\"\n                    multiple\n                    type=\"file\"\n                    onChange={uploadXMLHandler}\n                />\n                <label htmlFor=\"raised-button-file\">\n                    <Button\n                    style = {{\n                        background: 'linear-gradient(45deg, #be2a92bd 30%, #FF8E53 90%)',\n                        borderRadius: 3,\n                        border: 0,\n                        color: 'white',\n                        height: 48,\n                        padding: '0 30px',\n                        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n                    }}\n                     variant=\"contained\" component=\"span\" className=\"uploadButton\">\n                        Upload\n                    </Button>\n                </label>\n            </div>\n            <form onSubmit={handleSubmit}>\n                {showElement ?\n                    <div className=\"switchButtonDiv\">\n                        <h2>\n                            Turn On and Off<BootstrapSwitchButton\n                                checked={switchButton}\n                                onstyle='success'\n                                size='sm'\n                                offstyle='danger'\n                                onChange={handleSwitchButton}\n                            />\n                        </h2>\n                    </div>\n\n                    : null\n                }\n\n                <h2>\n                    <div className=\"normalField\">\n                        <h2>\n                            <TextField id=\"normalField\" label=\"Input Integer Value here\" variant=\"outlined\"\n                                InputLabelProps={{ style: { color: '#DBD5D5' }, }} onChange={handleNormalFieldInteger}>\n                            </TextField>\n                        </h2>\n                    </div>\n                    <div className=\"sliderHeader\">Slide left or write by clicking on the point\n                        <Slider\n                            defaultValue={30}\n                            aria-labelledby=\"discrete-slider\"\n                            valueLabelDisplay=\"auto\"\n                            step={1}\n                            color='primary'\n                            track='inverted'\n                            onChange={handleChange}\n                            marks={sliderIntValues}\n                            min={0}\n                            max={100}>\n                        </Slider>\n                    </div>\n                </h2>\n                <div>\n                    <span className=\"sliderValue\">Slider Integer Value {sliderValue}%</span>\n                </div>\n\n                <div className=\"floatValueDiv\">\n                    <Slider\n                        defaultValue={1.5}\n                        aria-labelledby=\"discrete-slider\"\n                        valueLabelDisplay=\"auto\"\n                        step={0.1}\n                        color='primary'\n                        track='inverted'\n                        onChange={handleFloatValue}\n                        marks={sliderFloatValues}\n                        min={0.0}\n                        max={10.0}>\n                    </Slider>\n                </div>\n                <div>\n                    <span className=\"sliderFloatValue\">Slider Float Value {someFloatValue}</span>\n                </div>\n\n                <div className=\"downloadXML\">\n                    <Button \n                      style = {{\n                        background: 'linear-gradient(45deg, #FF8E53 30%, #be2a92bd 90%)',\n                        borderRadius: 3,\n                        border: 0,\n                        color: 'white',\n                        height: 48,\n                        padding: '0 30px',\n                        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n                    }}\n                    variant=\"contained\"  type={\"submit\"} color=\"secondary\">\n                        Download XML\n                    </Button>\n                </div>\n                <div>\n                 <a href=\"http://192.168.4.1/html\">redirect</a> \n                </div>\n            </form>\n        </div>\n    );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","import React from 'react';\nimport Ucu from './components/ucu/Ucu'\nimport './App.css';\n\nexport default function App() {\n\n  return (\n    <div className=\"App\">\n      <Ucu />\n    </div>\n  );\n\n}\n"],"sourceRoot":""}