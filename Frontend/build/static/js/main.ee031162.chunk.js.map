{"version":3,"sources":["components/ucu/Ucu.js","index.js","App.js"],"names":["sliderIntValues","value","label","sliderFloatValues","Ucu","useState","inputFieldInteger","setInputFieldInteger","sliderValue","setSliderValue","switchButton","setSwitchButton","someFloatValue","setSomeFloatValue","a","fetch","then","res","text","method","body","loopbackValue","toString","useEffect","console","log","fetchSwitchButtonData","fetchSwitchButtonPutData","fetchSliderValueData","fetchSliderValuePutData","className","onSubmit","xml","require","create","ele","up","end","pretty","FileSaver","blob","Blob","type","saveAs","checked","onstyle","size","offstyle","onChange","TextField","id","variant","InputLabelProps","style","color","event","target","Slider","defaultValue","aria-labelledby","valueLabelDisplay","step","track","marks","min","max","Button","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee031162.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Button, Slider, TextField } from '@material-ui/core';\r\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react'\r\nimport './Ucu.css';\r\n\r\nconst sliderIntValues = [\r\n    {\r\n        value: 0,\r\n        label: '0',\r\n    },\r\n    {\r\n        value: 50,\r\n        label: '50',\r\n    },\r\n    {\r\n        value: 100,\r\n        label: '100',\r\n    },\r\n];\r\n\r\nconst sliderFloatValues = [\r\n    {\r\n        value: 0.0,\r\n        label: '0.0',\r\n    },\r\n    {\r\n        value: 5.0,\r\n        label: '5.0',\r\n    },\r\n    {\r\n        value: 10.0,\r\n        label: '10.0',\r\n    },\r\n];\r\n\r\n\r\nexport default function Ucu() {\r\n\r\n    const [inputFieldInteger, setInputFieldInteger] = useState(44);\r\n    const [sliderValue, setSliderValue] = useState(30);\r\n    const [switchButton, setSwitchButton] = useState(true);\r\n    const [someFloatValue, setSomeFloatValue] = useState(1.5);\r\n\r\n\r\n\r\n\r\n    async function fetchSwitchButtonData() {\r\n        fetch('/sb')\r\n            .then(res => res.text())\r\n    }\r\n\r\n    async function fetchSwitchButtonPutData() {\r\n        fetch('/sb', {\r\n            method: 'PUT', body: switchButton ? '1': '0' \r\n        })\r\n            .then(res => res.text())\r\n    }\r\n\r\n    \r\n\r\n    \r\n    async function fetchSliderValueData() {\r\n        fetch('/sv')\r\n            .then(res => res.text())\r\n    }\r\n\r\n    async function fetchSliderValuePutData() {\r\n        let loopbackValue = sliderValue.toString();\r\n        fetch('/sv', {\r\n            method: 'PUT', body: loopbackValue\r\n        })\r\n            .then(res => res.text())\r\n    }\r\n\r\n\r\n    function handleNormalFieldInteger(event, value) {\r\n        setInputFieldInteger(event.target.value);\r\n    }\r\n\r\n    function handleChange(event, value) {\r\n        setSliderValue(value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(\"Switch button is turned \" + (switchButton ? 'on' : 'off'));\r\n        console.log('Slider value ' + sliderValue);\r\n        fetchSwitchButtonData();\r\n        fetchSwitchButtonPutData();\r\n        fetchSliderValueData();\r\n        fetchSliderValuePutData();\r\n    });\r\n\r\n    function handleSwitchButton() {\r\n        setSwitchButton(!switchButton);\r\n    }\r\n\r\n    function handleFloatValue(event, value) {\r\n        setSomeFloatValue(value);\r\n    }\r\n\r\n    function handleSubmit() {\r\n        console.log(switchButton);\r\n        console.log(sliderValue);\r\n        console.log(someFloatValue);\r\n\r\n        var builder = require('xmlbuilder');\r\n        var xml = builder.create('config')\r\n            .ele('types').up()\r\n            .ele('componenents')\r\n            .ele('component', { 'name': 'AMOS_APP4UCU' })\r\n            .ele('ports')\r\n            .ele('receiver', { 'name': 'toApp' })\r\n            .ele('element', {\r\n                'name': 'test_u8',\r\n                'init': '0',\r\n                'min': '0',\r\n                'max': '0',\r\n                'type': 'uint8'\r\n            }, sliderValue).up()\r\n            .ele('element', {\r\n                'name': 'test_i8',\r\n                'init': '0',\r\n                'min': '0',\r\n                'max': '0',\r\n                'type': 'sint8'\r\n            }, sliderValue).up()\r\n            .ele('element', {\r\n                'name': 'test_u16',\r\n                'init': '0',\r\n                'min': '0',\r\n                'max': '0',\r\n                'type': 'uint16'\r\n            }, sliderValue).up()\r\n            .ele('element', {\r\n                'name': 'test_i16',\r\n                'init': '0',\r\n                'min': '0',\r\n                'max': '0',\r\n                'type': 'sint16'\r\n            }, sliderValue).up()\r\n            .ele('element', {\r\n                'name': 'test_u32',\r\n                'init': '0',\r\n                'min': '0',\r\n                'max': '0',\r\n                'type': 'uint32'\r\n            }, inputFieldInteger).up()\r\n            .ele('element', {\r\n                'name': 'test_i32',\r\n                'init': '0',\r\n                'min': '0',\r\n                'max': '0',\r\n                'type': 'sint32'\r\n            }, inputFieldInteger).up()\r\n            .ele('element', {\r\n                'name': 'test_r32',\r\n                'init': '0',\r\n                'min': '0',\r\n                'max': '0',\r\n                'type': 'float32'\r\n            }, someFloatValue).up()\r\n            .ele('element', {\r\n                'name': 'test_b',\r\n                'init': '0',\r\n                'min': '0',\r\n                'max': '0',\r\n                'type': 'boolean',\r\n            }, switchButton).up()\r\n            .end({ pretty: true });\r\n        console.log(xml)\r\n\r\n        //we can use File as well but IE and Edge do not support that so it is better to use Blob because it is supported\r\n        var FileSaver = require('file-saver');\r\n        var blob = new Blob([xml], { type: \"application/xml;charset=utf-8\" });\r\n        FileSaver.saveAs(blob, \"AMOS_APP4UCU.xml\");\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"Ucu\">\r\n            <h1 className=\"welcomeHeader\">This is the webserver page for the UCU microcontroller. <br /></h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"switchButtonDiv\">\r\n                    <h2>\r\n                        Turn On and Off<BootstrapSwitchButton\r\n                            checked={switchButton}\r\n                            onstyle='success'\r\n                            size='sm'\r\n                            offstyle='danger'\r\n                            onChange={handleSwitchButton}\r\n                        />\r\n                    </h2>\r\n                </div>\r\n                <h2>\r\n                    <div className=\"normalField\">\r\n                        <h2>\r\n                            <TextField id=\"normalField\" label=\"Input Integer Value here\" variant=\"outlined\"\r\n                                InputLabelProps={{ style: { color: '#DBD5D5' }, }} onChange={handleNormalFieldInteger}>\r\n                            </TextField>\r\n                        </h2>\r\n                    </div>\r\n                    <div className=\"sliderHeader\">Slide left or write by clicking on the point\r\n                        <Slider\r\n                            defaultValue={30}\r\n                            aria-labelledby=\"discrete-slider\"\r\n                            valueLabelDisplay=\"auto\"\r\n                            step={1}\r\n                            color='primary'\r\n                            track='inverted'\r\n                            onChange={handleChange}\r\n                            marks={sliderIntValues}\r\n                            min={0}\r\n                            max={100}>\r\n                        </Slider>\r\n                    </div>\r\n                </h2>\r\n                <div>\r\n                    <span className=\"sliderValue\">Slider Integer Value {sliderValue}%</span>\r\n                </div>\r\n\r\n                <div className=\"floatValueDiv\">\r\n                    <Slider\r\n                        defaultValue={1.5}\r\n                        aria-labelledby=\"discrete-slider\"\r\n                        valueLabelDisplay=\"auto\"\r\n                        step={0.1}\r\n                        color='primary'\r\n                        track='inverted'\r\n                        onChange={handleFloatValue}\r\n                        marks={sliderFloatValues}\r\n                        min={0.0}\r\n                        max={10.0}>\r\n                    </Slider>\r\n                </div>\r\n                <div>\r\n                    <span className=\"sliderFloatValue\">Slider Float Value {someFloatValue}</span>\r\n                </div>\r\n\r\n                <div className=\"downloadXML\">\r\n                    <Button variant=\"contained\" type={\"submit\"} color=\"secondary\">\r\n                        Download XML\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n\r\n            {/*<div className=\"xml\">*/}\r\n            {/*  <form id=\"xmlForm\" name=\"xmlForm\">*/}\r\n            {/*    <input id=\"input\" type=\"file\"></input> <input type=\"submit\" className=\"submit\"></input>*/}\r\n            {/*   </form>*/}\r\n            {/*    <table id=\"demo\"></table>*/}\r\n            {/*    <script type=\"text/javascript\" src=\"XML_upload.js\"></script>*/}\r\n            {/*</div>*/}\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n","import React from 'react';\r\nimport Ucu from './components/ucu/Ucu'\r\nimport './App.css';\r\n\r\nexport default function App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Ucu />\r\n    </div>\r\n  );\r\n\r\n}\r\n"],"sourceRoot":""}